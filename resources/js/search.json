[[{"l":"README","p":["In the fall 2019, I was encouraged by Drew Devault to make my own blog. He wanted to see more people writing about their passions and thoughts, in a permanent way and through a public medium.","I was one of the 50-or-so people who jumped onboard and gave it a try. However, after one blog post, I realized it was going to be a lot more difficult than I had anticipated. What should I write about? How often? What if no one reads it? What if someone does?","It also turns out overthinking is the best way for not getting anything done.","So there it is! This blog will be dedicated to writing about tech stuff, things I'm interested in, personal reflections, side projects, personal references, and other subjects I may be interested about.","If it's your first time browsing Chishiki, you can find more about it here, as it describes its structure and philosophy.","Thoughts written here are my own and don't reflect any of my past, present or future employer's position. This blog and all articles are licensed under the CC BY-SA 4.0 International License."]}],[{"l":"Man"},{"l":"Content and philosophy","p":["Chishiki, 「知識, ちしき」, is a japanese word for \"knowledge\". It is relevant to how I consider this blog: a form of personal knowledge base, inspired by the trend of digital gardens, for connecting ideas and thoughts.","This blog contains thoughts on topics that I find interesting or that I am curious about, as well as knowledge and references to resources or links I have liked or used that helped me understand the topic or gain appreciation of it. It is also a way of sharing them with my close-ones, not-so-close-ones and complete strangers.","Below you will find a few notes on the structure of this blog and its philosophy.","If this is the first time visiting this blog, you can start by reading from the top entry down and see what sparks your interest."]},{"l":"Blog Structure","p":["Most blogs I see are organized chronologically. This can make them confusing and hard to read.","With this in mind, I decided that I'd much rather organize my blog like a manual page or a book - with \"chapters\" and \"subchapters\". Hence, this blog is organized by topics I am interested in.","Each folder in the left panel refers to a topic. Each subpage is related to the parent topic.","I try to structure things so everyone can find them and benefit from reading them easily and quickly.","If you find any mistake, especially if something is plain wrong, you can fork this repository and make a push request with the correct changes. Alternatively, you can open an issue specifying what you think is wrong."]}],[{"l":"GDPR modelling for log based compliance checking","p":["This is about a work we have carried out at CEA in 2018-2019. The goal was to translate legal rules into a logic programming language to perform compliance checking through logs.","Abstract: Since the entry into force of the General Data Protection Regulation (GDPR), public and private organizations face unprecedented challenges to ensure compliance with new data protection rules. To help its implementation, academics and technologists proposed innovative solutions, leading to what is known today as privacy engineering. Among the main goals of these solutions are to enable compliant data processing by controllers and to increase trust in compliance by data subjects. While data protection by design (Article 25 of GDPR) constitutes a keystone of the regulation, many legacy systems are not designed and implemented with this concept in mind, but still process large quantities of personal data. Consequently, there is a need for “after design” ways to check compliance and remediate the data protection issues. In this paper, we suggest monitoring and checking the compliance of legacy systems through logs. To this end, we modelled a core subset of the GDPR in the Prolog language. The approach we followed produced an operational model of the GDPR which eases the interactions with standard operational models of Information Technology (IT) systems. Different dimensions required to properly address data protection obligations have been covered, and in particular time-related properties such as retention time. The logic-based GDPR model has also been kept as close as possible to the legal wording to allow a Data Protection Officer to explore the model in case of need. Finally, even if we don’t have a completed tool yet, we created a proof-of-concept framework to use the GDPR model to detect data protection compliance violations by monitoring the IT system logs.","Published in IFIPTM 2019: Trust Management XIII pp 1–18"]}],[{"l":"Happy 30th birthday VIM","p":["Happy Birthday, Vim!","Vim turned 30 this month (Nov. 2nd 2021 to be precise).","It was introduced to me by one of my professors during my IT studies in the early 2000s. In the very few seconds of trying it out, I had one of the biggest realization I had during my studies: that I could write plain text in something other than a Word document (despite not being able to figure out how to exit the application).","But more than this, it taught me how text should be, and remain, a first class citizen. So much of the work of a developer (let alone a writer!) is to type and manipulate text. Anything that interrupts that process, such as the use of a mouse, can become an annoyance or break the flow of writing. Since most developers are optimizers, many try to keep their hands on the keyboard as much as possible. It saves time, keep them in the flow and helps(?) to provide better software. Keeping text as a first class citizen also means one should not have to navigate through a GUI to find the right place to adjust styles or settings. Vim allows just that as well, by allowing to type and issue commands directly from the keyboard.","Vim is a tool. And like all tools, it'll be useful for some applications, and useless for others. But one thing is for sure: in technology, very few things stick around for long. Vim has been around for longer than a generation now! Why? Probably because while many things have changed in the past decades, the paradigm of how coders actually manipulate and input code isn’t all that different today than it was thirty years ago. No wonder it is still in the top 5 of developers favorite development environments.",":wq!"]},{"l":"Links","p":["How to exit Vim","Five tips for getting started with Vim","Vim-adventure-- Learning VIM while playing a game","Let Vim Do the Typing-- Great masterclass by George Brocklehurst showing various built-in completion mechanisms."]}],[{"i":"what-is-pgpgpg-why-should-you-use-it-and-how","l":"What is PGP/GPG, why should you use it, and how.","p":["This post is primarly for the non-tech saavy, in the hope that they will have a better grasp of what PGP is, but also, perhaps, use it."]},{"i":"eli5---what-does-pgp-stand-for-and-how-does-it-work","l":"ELI5 - What does PGP stand for and how does it work?"},{"i":"gpg-stands-for-pretty-good-privacy","l":"GPG stands for \"Pretty Good Privacy\".","p":["... and GPG, or GnuPG (GNU Privacy Guard), is one of the implementations of the PGP standard, and is a strong alternative to the official PGP software. In other words, GPG is PGP. I'll be using them"]},{"i":"what-is-it","l":"What is it?","p":["First, let me tell you what it is not.","Imagine you have a box, and you want to put something private in it. Something that only a few selected people would be allowed to see. If you would want to send that box to someone, you'd probably add a lock to it. But in order for the people you trust to open that box, you'd need to send its key along with it, perhaps by taping it under the box.","If someone steals the box, it won't be long until they could open and access its content.","PGP fixes this. In this analogy, PGP is a box. Not with one, but two locks; each of which has its own key. The \"public key\" can only be used to lock the box, and can be given it to anyone that asks for it (mine is here!). The \"private key\" can only be used to unlock the box. You must keep that one for yourself.","If you were to send a private message, you'd tell your friend to get a box with these two locks. Your friend would send you that box along with the public key. You'd put the message in the box, lock it with the public key and send it away. Your friend would then be the only one to be able to open the box, as they are the only one to have the private key."]},{"i":"why-would-you-want-to-use-it-","l":"Why would you want to use it ?","p":["First, let me tell you what 'traditional' emails don't do.","Traditional emails don't guarantee the sender's identity and can't completely detect whether an email is really sent by the sender it claims to be (heard of phishing emails?). Traditional emails also travel and are stored in plain text. This means that anyone managing a server or the network can read (and possibly modify) the email. The recipient can't be completely sure the content of the email they receive hasn't been modified along the way. It's quite analogous to sending a postcard by postmail. Any information written on it should be regarded as publicaly accessible, and possibly modified.","PGP/GPG solves a lot of these issues. It is useful for privacy, security and authenticity. Privacy and security, because you can prevent anyone from accessing content you don't want to share. This doesn't only apply to highly critical businesses, journalists and activists, but also to people like you & I. Authenticity, because when you 'lock' (aka. encrypt) your data with PGP, it digitally signs that information. So, if an email recipient is not sure about the identity of its sender, they can use a digital signature in conjunction with PGP to verify their identity."]},{"i":"so-its-just-pretty-good-privacy","l":"So it's just pretty good privacy?","p":["PGP/GPG allows for data encryption and signing, which solve all three issues I mentioned above. However, it doesn’t provide full privacy. Some parts of the message are still public, such as headers (which include information on who sent it, when they sent it, and possibly where did they send it from)."]},{"i":"why-doesnt-everybody-use-it","l":"Why doesn't everybody use it?","p":["I don’t quite know. My take is that most people aren't concerned about their online privacy enough. It's not a feature set by default in any email service I know of, so no one knows about it. Maybe it is perceived as too difficult to use? However, it’s not really difficult to get started with, and when you are up and running, it is really easy to use."]},{"i":"how-can-you-install-gpg","l":"How can you install GPG.","p":["The Free Software Foundation has made a pretty clear step by step guide to make your keys and test out your encrypted email."]}],[{"i":"what-is-software-engineering","l":"What is Software Engineering?","p":["I believe in the power of analogies as a way to conceptualize and understand abstract problems. There is an abundance of metaphors around software development. Quoting Steve McConnell in Code Complete 2, software development is considered to be \"a science (David Gries, 1981), an art (Donald Knuth, 1998), a game (Alistair Cockburn, 2002), similar to driving a car (P. J. Plauger and Kent Beck, 1993), and even making your way through a tar pit surrounded by dinosaurs (Frederick P. Brooks, 1995).\"","Undoubtedly, the most famous & repeated analogy is to consider software development to be analogous to constructing a building. In order to make a building, one calls an architect to draw up the blueprints, which are handed over to a builder who then constructs that building according to the specifications in these blueprints, in accordance with professional standards.","I have heard (and used) this analogy in the past, but I have come to realize how it may convey a partial understanding of what software engineering really is. The main reason is that buildings have a much higher fault tolerance than software. More often than not, placing a brick or torque slightly off will not cause the building to collapse. On the other hand, the slightest buffer overflow or a single null pointer can cause any given system to crash or be exploited. I see countless walls that don't line up perfectly, pipes that don't quite connect correctly, or windows that don't close perfectly. Buildings aren't built flawlessly, and they don't have to. Many errors are easily painted over. Software engineering is incredibly more complex than building sky-scrappers, and small errors are prone to be magnified. Microsoft's Windows operating system, is likely made of around 50 million lines of code, while the Empire State building has 100,000 rivets and 10 million bricks, many of which having been built in a quite standardized way.","This being said, it took a while for me to find a proper analogy that I would be comfortable using, and to which I could relate to. This was until I came across Andy Hunt's book, The Pragmatic Programmer(2019), who considers software development to be less like building construction, and more like gardening.","Sure there's always some planing to be done: a landscapist will perform some on-site analyses and land planning, while a few other experts will prepare the soil, decide the types of plants, where and how to plant them according to many parameters... Similarly, software engineers will come up with the specifications and requirements, while others will write the well-designed code that will eventually grow to become the overall system.","However, once the seeds blossom, the garden doesn't quite come up the way you imagined it: some plants are smaller, some are bigger, or less leafy than you hoped, the colors are nothing like you imagined, they don't look good next to each other, and some may even die soon afterwards. Quite the same way, programmers must face development bugs and strive towards getting rid of them, make tests to avoid them, make some adjustments; all this for the end user's enjoyment.","Just like there is no such thing as a low-maintenance garden, there is no such thing as low-maintenance software. Both need to be maintained -- in a very different way than buildings. Software and gardening maintenance are organic by nature, their shape will change over time, and both imply regular interactions. Farmers and developers both face priorities, constraints & variables, which they do their best to control and make do. Software and gardens grow, more or less visibly to the public: sometimes, focus may be on pruning, for better robustness/structure, and sometimes it's flower/feature season. Both the developer & the gardener care about their code/flowers, continuously getting rid without second thoughts of any weeds and bugs, stuff that are sin't needed or unwanted, allowing room for improvements later on. Both must pay close attention to resources, as too much or too little may be counterproductive.","The matter of fact is, software is nothing mechanical, it is not static, and it is not concrete. It is not just built, and that's it. Software is soft, and alive in many ways.","This reflection may not be new to a software developer, but a significant amount of non-technical people may not realize this."]}],[{"l":"Context"},{"i":"chosen-by-the-blob","l":"Chosen by the blob.","p":["In 2022, the French National Centre for Scientific Research launched a large-scale science project, named \"Derrière le Blob, la recherche\" (litt.\"Behind the blob, the research\"). Open to the general public throughout the world, this experiment of unprecedented scope aims to study the effects of climate change on the blob.","46'000 people registered to be part of the experiment, for 15'000 blobs. The selection process was rather unique. All the volunteers were divided into 3 groups of equal sizes, labeled Group 1, Group 2 and Groupe 3. Each group was placed at an equal distance on the side of a Petri dish and identified by a drop of water filled with identical concentrations of sugar. A blob was placed in the center equidistant from the three drops of sugar water. After a few hours, it started to explore and detected the sugar molecules from groups 2 and 3 before that of group 1, hence selecting the volunteers in groups 2 and 3. (I was group 3 :-) ).","In this section, I will attempt to write about the fascinating \"thing\" that is the Blob, record a few usefull information on the course of the experiment as well as some updates."]},{"i":"what-is-the-blob","l":"What is the Blob?","p":["Its scientific, \"real\" name is: Physarum polycephalum. Mostly know as the Blob, as a tribute to a movie of the same name from 1958, it is a rather unique single-cell organism.","It's not an animal, nor a vegetable, nor a mushroom. It doesn't have a brain, but has learning capabilities. It can move, but has no legs. It has 720 different sexes. It can transmit information as it merges with other blobs. It can double in size daily and can reach several square meters. It's able to regenerate itself over the course of a few minutes, and its life span can easily reach several decades.","Although the story goes that the blob was discovered in 1973, the first blobs appeared a billion years ago. The blob is composed of a cell but this can reach several meters in diameter (in comparison, a human cell measures on average ten micrometers in diameter, or ten million times less!)","Just like humans, the blob, is the result of the fusion of two sex cells. In a proper environment, their spores are released into the air. When two cells of opposite sex meet (which isn't too complicated, since there are 720 sexes out there...), they fuse to become a single cell. But, unlike us, the cell will not divide. Its nucleus will. Therefore, the cell grows according to the divisions of its nuclei, until it reaches record sizes.","Blobs are mostly found in humid and shady areas of forests. When environmental conditions are bad (drought or lack of food) the blob turns into a sclerotium, which is a dormant state, until the situation improves. It can stay that way for years.","There are hundreds, if not thousands of different kind of blobs. The most common, being the Physarum polycephalum. It is bright yellow and formless. It is notably made up of a network of 'veins', which makes it move and allows the redistribute of all the nutrients and other essential proteins in the most efficient way possible."]},{"l":"Objective of the experiment","p":["Human beings can acclimatise themselves to a wide range of temperature and humidity. When traveling to high altitudes, our bodies adjust so that our cells still receive sufficient oxygen. When traveling in a very warm country, our body rids itself of excess heat by sweating. This ability, which is likely the results of thousands of years of acclimatisation, has made it possible for us to survive in most regions of Earth, from tropical countries, to harsh deserts, and arctic countries -- while most animals, and especially mammals, are restricted to a few environments.","While we often imagine global warming as a steady and regular increase of global temperature, it, in fact, manifests itself in a few different ways. One of the most impactful ones is through abrupt changes of temperature and environment. Essentially, these abrupt climate change are surprising (non-linear) changes in the climate system which results in a new climate state, much more suddenly than what is expected. And the more abrupt, the less efficient a population is in adaptation, and can, eventually, dwindle and become extinct.","The aim of the experiment is to study whether the growth of the blob and its behavior will be affected by regular and/or sudden changes in temperature. The blobs will be subjected to different temperature profiles."]},{"l":"The protocol","p":["The protocol is public and freely accessible here (in french). Anyone with a blob may follow or recreate the experiment.","I have been attributed one strain of blob called Badhamia Utricularis, which are mostly slow compared to Physarum Polycephalum, especially in the wake up phase (I like him already).","I am asked to follow 4 protocols (2, 3, 10 and 15), which will be detailed in the upcoming sections, but are summarised as followed :","Gradual drop in temperature (5 days)","Increase in temperature over 1 day (5 days)","Low intensity increase over 2 days (5 days)","Five successive increases in temperature (10 days)"]},{"i":"useful-links","l":"Useful links.","p":["The Blob: a cell that learns. (Youtube, CNRS)","How this Blob solves mazes(Youtube, Wired)","Fungal intelligence: Lead the way to improved technological systems(Youtube, Brian Roemmele)","Human biology adaptability","Abrupt Climate Change: Inevitable Surprises (National Academies of Sciences, Engineering, and Medicine. 2002)"]}],[{"l":"Updates and results","p":["Add oatmeal on the right side of petri dish #3.","Add oatmeal on the right side of petri dish #3. I've tried to spread them more evenly.","Awakening stage protocol(CNRS)","Briefly dip each sclerotium (8) in a glass of water.","Considering the oatmeal isn't covered by the blob, and as per instructions, I'll give it more time before transfering it to a new petri dish.","Cut each sclerotium (4) in half.","Disregard the oldest part (on the left), including the paper as well as the oatmeal.","Drain.","Feel free to right click and open pictures in a new tab for full resolution.","Fill the right side of each petri dish with the equivalent of one soda bottle cap of oatmeal (the cap should be full but the flakes should not stick out).","For both petri dish, separate the blob in two along the H-B axis.","Good progress overall! Even if the blob in the Exp box is still somewhat lazy... Perhaps I should spread the oatmeal over a larger area to promote growth.","I can notice some form of mold on the old agar base (left side of picture). I don't suppose this is an issue since the left part (the oldest part) of the petri dish must be thrown away during this stage.","I have raised the temperature inside the box to roughly 22ºC to encourage growth.","Identical to yesterday.","Little change in development.","Place each half of the sclerotium on the left half of the petri dish with agar base (one half in the petri dish Ctrl #1, the other half in the petri dish Exp #1).","Place the two petri dishes in the blob-house.","Read the temperature in both blob-houses (the values should be identical).","Soon.","Take a photo so that you can later measure the size of the sclerotia (not all volunteers will have sclerotia of exactly the same size).","Take out two boxes from the Petri refrigerator: control box no. 1 and experimental box no. 1.","Temperature in the Ctrl #1 is : 19.4ºC","Temperature in the Ctrl #1 is : 19.7ºC","Temperature in the Ctrl #1 is : 20.1ºC","Temperature in the Ctrl #1 is : 21.0ºC","Temperature in the Exp #1 is : 19.5ºC","Temperature in the Exp #1 is : 19.7ºC","Temperature in the Exp #1 is : 19.9ºC","Temperature in the Exp #1 is : 20.9ºC","The above tabs will allow to follow the progress of the different experimental protocols I'll be following.","The colour is quite more vibrant. Connections has been made between the pieces of blob. It's alive :)","The first few pieces of oatmeal are covered.","This section details the awakening stage and early development of the blob. The purpose of this stage is to \"wake up\" the blob, which was sent in the form of a sclerotium, make it reach a significant size, while multiplying it over 8 petri dishes (4 ctrl and 4 exp dishes). Instructions for this stage can be found here(CNRS, french).","Transfer the new/awaken part (on the right) to the left side of a new petri dish (#3)."]}]]